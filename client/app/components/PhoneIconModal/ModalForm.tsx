'use client';

import { useState } from 'react';
import styles from './PhoneIconModal.module.css';
import axios from 'axios';

interface ModalFormProps {
  isOpen: boolean;
  onClose: () => void;
  dictionary?: any;
}

const ModalForm = ({ isOpen, onClose, dictionary }: ModalFormProps) => {
  const [name, setName] = useState('');
  const [phone, setPhone] = useState('');
  const [nameError, setNameError] = useState('');
  const [phoneError, setPhoneError] = useState('');

  const phoneRegex = /^(?:\+?380|0)\d{9}$/;

  const isSubmitButtonActive =
    name.trim() !== '' && phone.trim() !== '' && !nameError && !phoneError;

  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const nameValue = e.target.value;
    setName(nameValue);
    if (nameValue.trim() === '') {
      setNameError(dictionary?.nameError || '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è.');
    } else {
      setNameError('');
    }
  };

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const phoneValue = e.target.value;
    setPhone(phoneValue);
    if (!phoneRegex.test(phoneValue)) {
      setPhoneError(
        dictionary?.phoneError ||
          '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380 –∞–±–æ 0 —ñ 9 —Ü–∏—Ñ—Ä.'
      );
    } else {
      setPhoneError('');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!isSubmitButtonActive) return;

    const formData = new FormData(e.target as HTMLFormElement);
    const nameValue = formData.get('name');
    const phoneValue = formData.get('phone');

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    console.log('–ó–∞—è–≤–∫–∞:', { name: nameValue, phone: phoneValue });

    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram
    const message = `
      –ü—Ä–∏–≤—ñ—Ç!üôå
–ù–∞–¥—ñ–π—à–æ–≤ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ ¬´–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞¬ªü§ë
üíÜ‚Äç‚ôÇÔ∏è–Ü–º'—è: ${nameValue}
üì≤–¢–µ–ª–µ—Ñ–æ–Ω: ${phoneValue}
    `;

    try {
      // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –≤ Telegram
      const response = await axios.post(
        `https://api.telegram.org/bot${process.env.NEXT_PUBLIC_TG_TOKEN}/sendMessage`,
        {
          chat_id: process.env.NEXT_PUBLIC_CHAT_ID,
          text: message,
        }
      );

      if (response.data.ok) {
        alert(
          dictionary?.submitSuccess ||
            '–ó–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.'
        );
      } else {
        throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–ø–∏—Ç—É –¥–æ Telegram');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞:', error);
      alert('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }

    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ñ–æ—Ä–º—É —Ç–∞ –æ—á–∏—â–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    onClose();
    setName('');
    setPhone('');
    setNameError('');
    setPhoneError('');
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
        <span className={styles.closeIcon} onClick={onClose}>
          <i className="fa-solid fa-times"></i>
        </span>
        <h2>{dictionary?.title || '–ó–∞–º–æ–≤–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫'}</h2>
        <form onSubmit={handleSubmit}>
          <div className={styles.formGroup}>
            <i className="fa-regular fa-user"></i>
            <input
              type="text"
              id="name"
              name="name"
              required
              placeholder={dictionary?.namePlaceholder || "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è"}
              value={name}
              onChange={handleNameChange}
            />
            {nameError && (
              <span className={styles.errorMessage}>{nameError}</span>
            )}
          </div>
          <div className={styles.formGroup}>
            <i className="fa-solid fa-phone"></i>
            <input
              type="tel"
              id="phone"
              name="phone"
              required
              placeholder={dictionary?.phonePlaceholder || '+380XXXXXXXXX'}
              value={phone}
              onChange={handlePhoneChange}
            />
            {phoneError && (
              <span className={styles.errorMessage}>{phoneError}</span>
            )}
          </div>
          <button
            type="submit"
            className={styles.submitButton}
            disabled={!isSubmitButtonActive}
          >
            {dictionary?.submitButton || '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default ModalForm;
